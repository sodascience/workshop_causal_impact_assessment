---
title: "Using the CausalImpact package"
subtitle: "Causal impact assessment workshop"
author: "Erik-Jan van Kesteren & Ois√≠n Ryan"
eval: false
format: 
  html:
    toc: true
    self-contained: true
    code-fold: true
    df-print: paged
    callout-appearance: simple
    callout-icon: false
---

In this practical, we will use the following packages:

```{r}
#| label: setup
#| message: false
#| warning: false
#| code-fold: false
#| eval: true
library(tidyverse)
library(mice)
library(CausalImpact)
```

We will be using the proposition 99 dataset:

```{r}
#| label: data-true
#| echo: false
#| eval: true
prop99 <- read_rds("../../data/proposition99.rds")
```
```{r}
#| label: data
#| code-fold: false
prop99 <- read_rds("raw_data/proposition99.rds")
prop99
```

## Data preparation

The `CausalImpact` package needs its input data to be in a specific format: 

- there should be no missing values
- the response variable must be in the first column and any covariates in subsequent columns
- There should not be a "year" or index column

Thus, in order to run the method, we need to perform some data preparation steps.

::: {.callout-note}
## Exercise 1
Impute the missing values. Use the `mice()`, `complete()`, and `as_tibble()` functions to create a single dataset (`tibble`) without missing data. Use the `"cart"` method for imputation. If you are unfamiliar with (multiple) imputation, you can read the help file: `?mice`.

```{r}
#| label: mice

# impute missing 
prop99_imputed <- 
  prop99 |> 
  mice(m = 1, method = "rf") |> 
  complete() |> 
  as_tibble()
```
:::

::: {.callout-warning}
# Missing data imputation

In the interest of time, we do not go into the details of missing data imputation. In real-world applications, you should be a lot more careful with imputation than we've shown here. For example: in the next steps, we are assuming that the imputed data is actually observed, and we do not consider that we are uncertain about those values. Interpret the models with a grain of salt.
:::

Now that we have a "fully observed" dataset, we transform our long format data (with state as one column) to a wide format (with a column for each state for each variable of interest).

::: {.callout-note}
## Exercise 2
Create a wide-format dataset from the imputed data. Use the function `pivot_wider()`, where the new column names come from the `state` column, and the values come from the `cigsale`, `lnincome`, `beer`, `age15to24`, and `retprice` columns. 

```{r}
#| label: wider

# data with all covariates from all states in donor pool
prop99_wide <- 
  prop99_imputed |> 
  pivot_wider(
    names_from = state, 
    values_from = c(cigsale, lnincome, beer, age15to24, retprice)
  )
```
:::

::: {.callout-note}
# Exercise 3
Move the outcome of interest (`cigsale_California`) to the front of the dataset with `relocate()` and remove the `year` column with `select()`.

```{r}
#| label: reorder

# data with all covariates from all states in donor pool
prop99_wide <- 
  prop99_wide  |> 
  relocate(cigsale_California) |> 
  select(-year)
```
:::


::: {.callout-note}
# Exercise 3
Move the outcome of interest (`cigsale_California`) to the front of the dataset with `relocate()` and remove the `year` column with `select()`.

```{r}
#| label: reorder

# data with all covariates from all states in donor pool
prop99_wide <- 
  prop99_wide  |> 
  relocate(cigsale_California) |> 
  select(-year)
```
:::
## Running the model
